class Solution {
  fun widthOfBinaryTree(root: TreeNode?): Int {
    val lst = LinkedList<Pair<TreeNode?, Int>>()
    lst.add(Pair(root, 0))
    var res = 0
    while (!lst.isEmpty()) {
      val hd = lst.peek()
      val sz = lst.size
      for (i in 0 until sz) {
        val tmp = lst.poll()
        tmp?.left?.let{ lst.add(Pair(it, 2*tmp.second)) }
        tmp?.right?.let{ lst.add(Pair(it, 2*tmp.second+1)) }
      }
      res = res.coerceAtLeast(tmp.second - hd.second + 1)
    }
    return res
  }
}