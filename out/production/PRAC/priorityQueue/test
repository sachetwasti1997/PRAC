class Solution {
  fun kSmallestPairs(nums1: IntArray, nums2: IntArray, k: Int): List<List<Int>> {
    val pq = PriorityQueue<List<Int>> {l1, l2 -> (l2[0]+l2[1]) - (l1[0]+l1[1])}
    for (i in 0 .. minOf(nums1.size-1, k)) {
      for (j in 0 .. minOf(nums2.size-1, k)) {
        if (pq.isEmpty()) pq.add(listOf(nums[i], nums[j]))
        else if (nums[i] + nums[j] < pq.peek()[0]+pq.peek()[1] && pq.size == k) {
          pq.poll()
          pq.add(listOf(nums[i], num[j]))
        }else if (nums[i] + nums[j] < pq.peek()[0]+pq.peek()[1] && pq.size < k) {
          pq.add(listOf(nums[i], num[j]))
        } else if (nums[i] + nums[j] > pq.peek()[0]+pq.peek()[1]) break
      }
    }
    return pq.toList().reversed()
  }
}